# http://www.appveyor.com/docs/appveyor-yml
#
# To setup AppVeyor for your own personal repositories do the following:
# - Sign up
# - Add a new project
# - Select Git and fill in the Git clone URL
# - Setup a Git hook as explained in
#   https://github.com/appveyor/webhooks#installing-git-hook
# - Check 'Settings > General > Skip branches without appveyor.yml'
# - Check 'Settings > General > Rolling builds'
# - Setup the global or project notifications to your liking
#
# Note that kicking (or restarting) a build via the web UI will not work, as it
# will fail to find appveyor.yml .  The Git hook is the most practical way to
# kick a build.
#
# See also:
# - http://help.appveyor.com/discussions/problems/2209-node-grunt-build-specify-a-project-or-solution-file-the-directory-does-not-contain-a-project-or-solution-file
# - http://help.appveyor.com/discussions/questions/1184-build-config-vs-appveyoryaml

version: '{build}'

branches:
  except:
    - /^travis.*$/


# Don't download the full Mesa history to speed up cloning.  However the clone
# depth must not be too small, otherwise builds might fail when lots of patches
# are committed in succession, because the desired commit is not found on the
# truncated history.
#
# See also:
# - https://www.appveyor.com/blog/2014/06/04/shallow-clone-for-git-repositories
clone_depth: 100

cache:
  - freeglut-MinGW-3.0.0-1.mp.zip
  - freeglut-MinGW-3.0.0-2.mp.zip
  - '%LOCALAPPDATA%\pip\Cache'

# https://www.appveyor.com/docs/build-environment/#build-worker-images
os: Visual Studio 2015

environment:
  matrix:
    - MINGW_HOME: C:\mingw-w64\i686-6.3.0-posix-dwarf-rt_v5-rev1\mingw32
      PYTHON_HOME: C:\Python36
      FREEGLUT_ARCHIVE: freeglut-MinGW-3.0.0-1.mp.zip
      FREEGLUT_LIB: lib\libfreeglut.a
      TEST_TYPE: native

    - MINGW_HOME: C:\mingw-w64\x86_64-6.3.0-posix-seh-rt_v5-rev1\mingw64
      PYTHON_HOME: C:\Python36
      FREEGLUT_ARCHIVE: freeglut-MinGW-3.0.0-1.mp.zip
      FREEGLUT_LIB: lib\x64\libfreeglut.a
      TEST_TYPE: native

  # - MSVC_ARCH: x86
  #   PYTHON_HOME: C:\Python36
  #   FREEGLUT_ARCHIVE: freeglut-MSVC-3.0.0-2.mp.zip
  #   FREEGLUT_LIB: lib\freeglut.lib
  #   TEST_TYPE: native

  # - MSVC_ARCH: x86_amd64
  #   PYTHON_HOME: C:\Python36
  #   FREEGLUT_ARCHIVE: freeglut-MSVC-3.0.0-2.mp.zip
  #   FREEGLUT_LIB: lib\x64\freeglut.lib
  #   TEST_TYPE: native

    - TOXENV: 'py27-{noaccel,accel-win,streams}'
      TOXPYTHON: C:\Python27\python.exe
      PYTHON_HOME: C:\Python27
      PYTHON_VERSION: '2.7'
      PYTHON_ARCH: '32'
      TEST_TYPE: python

    - TOXENV: 'py33-{noaccel,accel-win,streams}'
      TOXPYTHON: C:\Python33\python.exe
      PYTHON_HOME: C:\Python33
      PYTHON_VERSION: '3.3'
      PYTHON_ARCH: '32'
      TEST_TYPE: python

    - TOXENV: 'py34-{noaccel,accel-win,streams}'
      TOXPYTHON: C:\Python34\python.exe
      PYTHON_HOME: C:\Python34
      PYTHON_VERSION: '3.4'
      PYTHON_ARCH: '32'
      TEST_TYPE: python

    - TOXENV: 'py35-{noaccel,accel-win,streams}'
      TOXPYTHON: C:\Python35\python.exe
      PYTHON_HOME: C:\Python35
      PYTHON_VERSION: '3.5'
      PYTHON_ARCH: '32'
      TEST_TYPE: python

    - TOXENV: 'py36-{noaccel,accel-win,streams}'
      TOXPYTHON: C:\Python36\python.exe
      PYTHON_HOME: C:\Python36
      PYTHON_VERSION: '3.6'
      PYTHON_ARCH: '32'
      TEST_TYPE: python

matrix:
  fast_finish: true

install:
  - ps: |
      $ENV:Path="$ENV:PYTHON_HOME;$ENV:PYTHON_HOME\Scripts;$ENV:Path"

      if ("$ENV:TEST_TYPE" -eq "native") {
        # Setup Python 3
        Write-Host $(pip --version)
        pip install -r python-requirements/minimum.txt
        pip install -r python-requirements/python3-extra.txt

        # Check CMake
        Write-Host $(cmake --version)

        # Install Ninja
        cinst -y ninja
        Write-Host $(ninja --version)

        # Setup MinGW
        if ("$ENV:MINGW_HOME" -ne "") {
          $ENV:Path = "$ENV:MINGW_HOME\bin;$ENV:Path"
        }

        # Setup MSVC
        if ("$ENV:MSVC_ARCH" -ne "") {
          cmd \c "$ENV:VS140COMNTOOLS\..\..\VC\vcvarsall.bat" $ENV:MSVC_ARCH |
          foreach {
            if ($_ -match "=") {
              $v = $_.split("="); set-item -force -path "ENV:\$($v[0])"  -value "$($v[1])"
            }
          }
        }

        # Install FreeGlut
        if (-Not (Test-Path "$ENV:FREEGLUT_ARCHIVE")) {
          Invoke-WebRequest "http://files.transmissionzero.co.uk/software/development/GLUT/$ENV:FREEGLUT_ARCHIVE" -OutFile "$ENV:FREEGLUT_ARCHIVE"
        }
        7z x -y "$ENV:FREEGLUT_ARCHIVE" > $null

        # Get glext.h
        mkdir "glext\GL"
        Invoke-WebRequest https://www.khronos.org/registry/OpenGL/api/GL/glext.h -OutFile glext\GL\glext.h
      } elseif ("$ENV:TEST_TYPE" -eq "python") {
        python --version
        pip --version
        pip install tox
        tox --version
      }

build_script:
  - ps: |
      if ("$ENV:TEST_TYPE" -eq "native") {
        cmake . -Bbuild -GNinja "-DGLUT_INCLUDE_DIR=$PWD\freeglut\include" "-DGLUT_glut_LIBRARY=$PWD\freeglut\$ENV:FREEGLUT_LIB" "-DGLEXT_INCLUDE_DIR=$PWD\glext"
        ninja -C build
      }

test_script:
  - ps: |
      if ("$ENV:TEST_TYPE" -eq "python") {
        tox
      }


# It's possible to setup notification here, as described in
# http://www.appveyor.com/docs/notifications#appveyor-yml-configuration , but
# doing so would cause the notification settings to be replicated across all
# repos, which is most likely undesired.  So it's better to rely on the
# Appveyor global/project notification settings.
