## Copyright (c) 2014 The Piglit Project
## Copyright (c) 2015 Intel Corporation
##
## Permission is hereby granted, free of charge, to any person obtaining a copy
## of this software and associated documentation files (the "Software"), to deal
## in the Software without restriction, including without limitation the rights
## to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## The above copyright notice and this permission notice shall be included in
## all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
## IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
## AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
## LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
## OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
## SOFTWARE.

<%!
  import itertools

  from six.moves import range
%>


# Test generated by:
# ${generator_command}
# Test tessellation control shader inputs
[require]
GLSL >= 1.50
GL_ARB_tessellation_shader

[vertex shader]
uniform struct S0 {
        ${params.var_type_full} v;
} reference[12];

out ${params.interface_name} {
        ${params.var_type_full} ${params.var_name};
} ${params.interface_vs_instance};

void main()
{
        ${params.interface_vs_instance}${params.vs_var_ref} = reference[gl_VertexID].v;
}

[tessellation control shader]
#extension GL_ARB_tessellation_shader : require
layout(vertices = 3) out;

uniform struct S0 {
        ${params.var_type_full} v;
} reference[12];

in ${params.interface_name} {
        ${params.var_type_full} ${params.var_name};
} ${params.interface_tcs_instance}[];

out int pass[];

void main()
{
        const int vertices_in = 3;
        int local_pass = 1;
        for (int i = 0; i < vertices_in; ++i) {
                int vertex_ID = gl_PrimitiveID * vertices_in + i;
                if (${params.interface_tcs_instance}[i]${params.tcs_var_ref} != reference[vertex_ID].v)
                        local_pass = 0;
        }
        pass[gl_InvocationID] = local_pass;
        gl_TessLevelOuter = float[4](1.0, 1.0, 1.0, 1.0);
        gl_TessLevelInner = float[2](1.0, 1.0);
}

[tessellation evaluation shader]
#extension GL_ARB_tessellation_shader : require
layout(quads) in;

in int pass[];

out vec4 vert_color;

void main()
{
        const vec4 red = vec4(1, 0, 0, 1);
        const vec4 green = vec4(0, 1, 0, 1);
        vec2[3] position = vec2[3](
                vec2(float(gl_PrimitiveID / 2) - 1.0, float(gl_PrimitiveID % 2) - 1.0),
                vec2(float(gl_PrimitiveID / 2) - 0.0, float(gl_PrimitiveID % 2) - 1.0),
                vec2(float(gl_PrimitiveID / 2) - 1.0, float(gl_PrimitiveID % 2) - 0.0)
        );
        gl_Position = vec4(position[0]
                    + (position[1] - position[0]) * gl_TessCoord[0]
                    + (position[2] - position[0]) * gl_TessCoord[1], 0.0, 1.0);
        vert_color = green;
        if (pass[0] == 0 || pass[1] == 0 || pass[2] == 0) {
                vert_color = red;
        }
}

[fragment shader]

in vec4 vert_color;

out vec4 frag_color;

void main()
{
        frag_color = vert_color;
}

[test]
% if params.var_array:
  % for i, j in itertools.product(range(12), range(params.var_array)):
uniform ${params.var_type} reference[${i}].v[${j}] ${params.test_data[i*j]}
  % endfor
% else:
  % for i in range(12):
uniform ${params.var_type} reference[${i}].v ${params.test_data[i]}
  % endfor
% endif
draw arrays GL_PATCHES 0 12
relative probe rgb (0.25, 0.25) (0.0, 1.0, 0.0)
relative probe rgb (0.75, 0.25) (0.0, 1.0, 0.0)
relative probe rgb (0.25, 0.75) (0.0, 1.0, 0.0)
relative probe rgb (0.75, 0.75) (0.0, 1.0, 0.0)
